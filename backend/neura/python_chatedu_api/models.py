# from sqlalchemy import Column, String, DateTime, Text
# from sqlalchemy.ext.declarative import declarative_base
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from bson import ObjectId

class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

class WorkspaceBase(BaseModel):
    title: str
    description: Optional[str] = None

class WorkspaceCreate(WorkspaceBase):
    pass

class WorkspaceUpdate(WorkspaceBase):
    pass

class Workspace(WorkspaceBase):
    id: PyObjectId = Field(default_factory=PyObjectId, alias="_id")
    created_at: datetime = Field(default_factory=datetime.utcnow)

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}



# Topics
class TopicNode(BaseModel):
    id: int
    name: str
    x: float
    y: float
    completionPercentage: float

class TopicEdge(BaseModel):
    sourceTopicId: int
    targetTopicId: int

class TopicCreate(BaseModel):
    name: str
    notebookId: int
    parentTopicId: int | None = None # Optional, defaults to None
    orderPosition: int

# --- Enhanced Study Guide Models (Multimodal) ---

class ExtractedImageInfo(BaseModel):
    # Represents info about an image extracted from the document
    filename: str # The unique filename saved temporarily (e.g., uuid.png)
    # Optional: Add page number if extractable, useful for frontend display
    page_number: int | None = None

class EnhancedStudyGuideSection(BaseModel):
    # Represents one section of the enhanced study guide
    section_title: str # Title generated by Gemini
    explanation: str # Explanatory text generated by Gemini
    # List of temporary filenames associated by Gemini with this section
    associated_image_filenames: List[str] = []

class EnhancedStudyGuideResponse(BaseModel):
    # The final response structure for the API endpoint
    original_filename: str # Filename of the uploaded document
    # List of *all* images extracted, including their temp filenames and page numbers
    extracted_images: List[ExtractedImageInfo]
    # The structured study guide with explanations and associated image refs
    study_guide: List[EnhancedStudyGuideSection]
