from pydantic import BaseModel
from typing import List

class TopicNode(BaseModel):
    id: int
    name: str
    x: float
    y: float
    completionPercentage: float

class TopicEdge(BaseModel):
    sourceTopicId: int
    targetTopicId: int

class TopicCreate(BaseModel):
    name: str
    notebookId: int
    parentTopicId: int | None = None # Optional, defaults to None
    orderPosition: int

# --- Enhanced Study Guide Models (Multimodal) ---

class ExtractedImageInfo(BaseModel):
    # Represents info about an image extracted from the document
    filename: str # The unique filename saved temporarily (e.g., uuid.png)
    # Optional: Add page number if extractable, useful for frontend display
    page_number: int | None = None

class EnhancedStudyGuideSection(BaseModel):
    # Represents one section of the enhanced study guide
    section_title: str # Title generated by Gemini
    explanation: str # Explanatory text generated by Gemini
    # List of temporary filenames associated by Gemini with this section
    associated_image_filenames: List[str] = []

class EnhancedStudyGuideResponse(BaseModel):
    # The final response structure for the API endpoint
    original_filename: str # Filename of the uploaded document
    # List of *all* images extracted, including their temp filenames and page numbers
    extracted_images: List[ExtractedImageInfo]
    # The structured study guide with explanations and associated image refs
    study_guide: List[EnhancedStudyGuideSection]
