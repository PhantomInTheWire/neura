from pydantic import BaseModel
from typing import List

class TopicNode(BaseModel):
    id: int
    name: str
    x: float
    y: float
    completionPercentage: float

class TopicEdge(BaseModel):
    sourceTopicId: int
    targetTopicId: int

class TopicCreate(BaseModel):
    name: str
    notebookId: int
    parentTopicId: int | None = None # Optional, defaults to None
    orderPosition: int

# --- Enhanced Study Guide Models (Hierarchical) ---

class ExtractedImageInfo(BaseModel):
    # Represents info about an image extracted from the document
    filename: str # The unique filename saved temporarily (e.g., uuid.png)
    # Optional: Add page number if extractable, useful for frontend display
    page_number: int | None = None

class StudyGuideSubsection(BaseModel):
    # Represents one subsection within a main section
    subsection_title: str # Title generated by Gemini
    explanation: str # Detailed explanation with Markdown + image refs
    # Images associated specifically with this subsection
    associated_image_filenames: List[str] = []

class StudyGuideSection(BaseModel):
    # Represents one main section
    section_title: str # Main title generated by Gemini
    # New fields for the overview:
    section_overview_description: str # Brief description/goal of the section
    subsection_titles: List[str] # List of titles for subsections within this section
    # List of actual subsection content objects
    subsections: List[StudyGuideSubsection]

class StudyGuideResponse(BaseModel):
    # The final response structure for the API endpoint
    original_filename: str
    extracted_images: List[ExtractedImageInfo] # All extracted (potentially pre-filtered) images
    study_guide: List[StudyGuideSection] # List of main sections
